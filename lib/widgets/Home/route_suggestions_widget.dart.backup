import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import '../../services/location_api_service.dart';
import '../../services/location_service.dart';
import '../../models/route_suggestion_model.dart';
import '../../screen/route_detail_screen.dart';

class RouteSuggestionsWidget extends StatefulWidget {
  final String? destinationAddress;
  final double? destinationLatitude;
  final double? destinationLongitude;
  final double? userLatitude;
  final double? userLongitude;

  const RouteSuggestionsWidget({
    super.key,
    this.destinationAddress,
    this.destinationLatitude,
    this.destinationLongitude,
    this.userLatitude,
    this.userLongitude,
  });

  @override
  _RouteSuggestionsWidgetState createState() => _RouteSuggestionsWidgetState();
}

class _RouteSuggestionsWidgetState extends State<RouteSuggestionsWidget> {
  List<RouteSuggestionModel>? routeSuggestions;
  bool isLoading = false;
  String? error;

  Future<void> findRouteSuggestions() async {
    print('🎯 RouteSuggestionsWidget.findRouteSuggestions called');
    print('🎯 User coordinates from params: (${widget.userLatitude}, ${widget.userLongitude})');
    print('🎯 Destination: (${widget.destinationLatitude}, ${widget.destinationLongitude})');

    if (widget.destinationLatitude == null || widget.destinationLongitude == null) {
      print('❌ Destination coordinates are null');
      setState(() {
        error = 'Destino no especificado';
      });
      return;
    }

    setState(() {
      isLoading = true;
      error = null;
    });

    try {
      // 🚨 SOLUCIÓN: Usar coordenadas del usuario desde parámetros, no ubicación actual
      double userLat, userLng;

      if (widget.userLatitude != null && widget.userLongitude != null) {
        // Usar coordenadas del usuario que se pasaron como parámetro
        userLat = widget.userLatitude!;
        userLng = widget.userLongitude!;
        print('✅ Using user coordinates from parameters: ($userLat, $userLng)');
      } else {
        // Fallback: obtener ubicación actual si no hay coordenadas del usuario
        print('⚠️ No user coordinates in parameters, getting current location...');
        Position? position;
        try {
          position = await LocationService.getCurrentLocation()
              .timeout(const Duration(seconds: 10));
        } catch (e) {
          print('❌ Timeout getting location: $e');
          setState(() {
            error = 'Tiempo de espera agotado al obtener ubicación. Verifica tu conexión GPS.';
            isLoading = false;
          });
          return;
        }

        if (position != null) {
          userLat = position.latitude;
          userLng = position.longitude;
          print('✅ Got current location as fallback: ($userLat, $userLng)');
        } else {
          print('❌ Could not get current location');
          setState(() {
            error = 'No se pudo obtener la ubicación actual';
            isLoading = false;
          });
          return;
        }
      }

      print('🎯 Using origin coordinates: ($userLat, $userLng)');
      print('🎯 Destination coordinates: (${widget.destinationLatitude}, ${widget.destinationLongitude})');

      // Verificar que las coordenadas del destino no sean nulas o cero
      if (widget.destinationLatitude == null || widget.destinationLongitude == null ||
          widget.destinationLatitude == 0.0 || widget.destinationLongitude == 0.0) {
        print('❌ Destination coordinates are null or zero!');
        setState(() {
          error = 'Coordenadas del destino no disponibles';
          isLoading = false;
        });
        return;
      }
        
        // Buscar sugerencias de rutas con timeout
        print('🎯 Calling LocationApiService.suggestRoute...');
        Map<String, dynamic> result;
        try {
          result = await LocationApiService.suggestRoute(
            userLatitude: userLat,
            userLongitude: userLng,
            destinationLatitude: widget.destinationLatitude!,
            destinationLongitude: widget.destinationLongitude!,
            maxWalkingDistance: 1000, // 1 km máximo caminando
          ).timeout(const Duration(seconds: 15));
        } catch (e) {
          print('❌ Timeout or error in API call: $e');
          setState(() {
            error = 'Tiempo de espera agotado al buscar rutas. Verifica tu conexión a internet.';
            isLoading = false;
          });
          return;
        }

        print('🎯 API result: $result');

        if (result['status'] == 'success') {
          print('🎯 Success! Processing suggestions...');
          try {
            final data = result['data'];
            if (data == null) {
              throw Exception('Campo "data" es null en la respuesta');
            }
            
            // Manejar tanto la estructura antigua (all_suggestions) como la nueva (data directo)
            List<dynamic> allSuggestions;
            if (data is List) {
              // Nueva estructura: data es directamente la lista de sugerencias
              allSuggestions = data;
            } else if (data is Map && data.containsKey('all_suggestions')) {
              // Estructura antigua: data contiene all_suggestions
              allSuggestions = data['all_suggestions'];
              if (allSuggestions == null) {
                throw Exception('Campo "all_suggestions" es null en la respuesta');
              }
            } else {
              throw Exception('Estructura de datos no reconocida en la respuesta');
            }
            
            print('🔍 allSuggestions type: ${allSuggestions.runtimeType}');
            print('🔍 allSuggestions length: ${allSuggestions.length}');
            print('🔍 First suggestion: ${allSuggestions.isNotEmpty ? allSuggestions.first : 'No suggestions'}');
            
            final suggestions = <RouteSuggestionModel>[];
            
            for (int i = 0; i < allSuggestions.length; i++) {
              try {
                print('🔍 Processing suggestion $i: ${allSuggestions[i]}');
                final suggestion = RouteSuggestionModel.fromJson(allSuggestions[i]);
                suggestions.add(suggestion);
              } catch (e) {
                print('❌ Error processing suggestion $i: $e');
                print('❌ Suggestion data: ${allSuggestions[i]}');
                // Continuar con la siguiente sugerencia sin crear fallback
              }
            }

            print('🎯 Processed ${suggestions.length} suggestions');

            setState(() {
              routeSuggestions = suggestions;
              isLoading = false;
            });
          } catch (e) {
            print('❌ Error processing suggestions: $e');
            setState(() {
              error = 'Error al procesar las sugerencias de rutas: ${e.toString()}';
              isLoading = false;
            });
          }
        } else if (result['status'] == 'error' && result['message']?.contains('No se encontraron rutas') == true) {
          // This is a valid response indicating no routes were found
          print('🎯 No routes found - this is expected behavior');
          setState(() {
            routeSuggestions = []; // Empty list to show "no routes" message
            isLoading = false;
          });
        } else {
          print('❌ API returned error status: ${result['status']}');
          setState(() {
            error = result['message'] ?? 'Error al obtener sugerencias';
            isLoading = false;
          });
        }
      } else {
        print('❌ Could not get current position');
        setState(() {
          error = 'No se pudo obtener la ubicación actual';
          isLoading = false;
        });
      }
    } catch (e) {
      print('❌ Exception in findRouteSuggestions: $e');
      setState(() {
        error = 'Error inesperado: ${e.toString()}';
        isLoading = false;
      });
    }
  }

  @override
  void initState() {
    super.initState();
    // No buscar automáticamente, esperar a que se confirme el destino
  }

  @override
  void didUpdateWidget(RouteSuggestionsWidget oldWidget) {
    super.didUpdateWidget(oldWidget);
    
    // Si las coordenadas del destino cambiaron y no estamos cargando, buscar automáticamente
    if (widget.destinationLatitude != oldWidget.destinationLatitude ||
        widget.destinationLongitude != oldWidget.destinationLongitude) {
      
      if (widget.destinationLatitude != null && 
          widget.destinationLongitude != null && 
          !isLoading) {
        
        print('🎯 Destination coordinates changed, automatically searching for routes');
        WidgetsBinding.instance.addPostFrameCallback((_) {
          findRouteSuggestions();
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.route,
                      color: theme.colorScheme.primary,
                      size: 24,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      'Rutas Sugeridas',
                      style: theme.textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                if (widget.destinationLatitude != null && widget.destinationLongitude != null)
                  ElevatedButton.icon(
                    onPressed: isLoading ? null : findRouteSuggestions,
                    icon: isLoading 
                      ? const SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            color: Colors.white,
                          ),
                        )
                      : const Icon(Icons.search, size: 16),
                    label: Text(isLoading ? 'Buscando...' : 'Buscar Rutas'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: theme.colorScheme.primary,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
              ],
            ),
            if (widget.destinationAddress != null) ...[
              const SizedBox(height: 8),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: theme.colorScheme.secondaryContainer.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(
                      Icons.location_on,
                      color: theme.colorScheme.secondary,
                      size: 16,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Destino: ${widget.destinationAddress}',
                        style: theme.textTheme.bodyMedium,
                      ),
                    ),
                  ],
                ),
              ),
            ],
            const SizedBox(height: 16),
            if (isLoading)
              const Center(
                child: Column(
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 8),
                    Text('Buscando rutas sugeridas...'),
                  ],
                ),
              )
            else if (error != null)
              _buildErrorWidget()
            else if (routeSuggestions != null && routeSuggestions!.isNotEmpty)
              _buildSuggestionsList()
            else if (routeSuggestions != null && routeSuggestions!.isEmpty)
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: theme.colorScheme.surfaceVariant.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: theme.colorScheme.primary,
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'No se encontraron rutas convenientes',
                            style: theme.textTheme.bodyMedium?.copyWith(
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'No hay rutas de transporte público disponibles para este viaje. Considera usar otras opciones de transporte.',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.onSurfaceVariant,
                      ),
                    ),
                  ],
                ),
              )
            else
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: theme.colorScheme.surfaceVariant.withOpacity(0.3),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: theme.colorScheme.primary,
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'Destino confirmado',
                            style: theme.textTheme.bodyMedium?.copyWith(
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Buscando automáticamente las mejores rutas...',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.onSurfaceVariant,
                      ),
                    ),
                  ],
                ),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildSuggestionsList() {
    return Column(
      children: routeSuggestions!.take(3).map((suggestion) {
        return _buildSuggestionCard(suggestion);
      }).toList(),
    );
  }

  Widget _buildSuggestionCard(RouteSuggestionModel suggestion) {
    final theme = Theme.of(context);
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: theme.colorScheme.surfaceVariant.withOpacity(0.3),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: theme.colorScheme.outline.withOpacity(0.2),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Expanded(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: theme.colorScheme.primary,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    suggestion.routeName,
                    style: theme.textTheme.labelSmall?.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                    overflow: TextOverflow.ellipsis,
                    maxLines: 1,
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: theme.colorScheme.secondary,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  '${suggestion.score.toStringAsFixed(1)}',
                  style: theme.textTheme.labelSmall?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                Icons.departure_board,
                color: theme.colorScheme.primary,
                size: 16,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      suggestion.subirEn.estacion,
                      style: theme.textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    Text(
                      '${suggestion.subirEn.distanciaCaminando} • ${suggestion.subirEn.tiempoCaminando}',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.secondary,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Row(
            children: [
              Icon(
                Icons.location_on,
                color: theme.colorScheme.secondary,
                size: 16,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      suggestion.bajarseEn.estacion,
                      style: theme.textTheme.bodyMedium,
                    ),
                    Text(
                      '${suggestion.bajarseEn.distanciaCaminando} • ${suggestion.bajarseEn.tiempoCaminando}',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: theme.colorScheme.secondary,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                Icons.access_time,
                color: theme.colorScheme.secondary,
                size: 16,
              ),
              const SizedBox(width: 8),
              Text(
                '${suggestion.estimatedBusTimeFormatted} en bus',
                style: theme.textTheme.bodySmall,
              ),
              const SizedBox(width: 16),
              Icon(
                Icons.directions_walk,
                color: theme.colorScheme.secondary,
                size: 16,
              ),
              const SizedBox(width: 8),
              Text(
                '${(suggestion.totalWalkingDistance / 1000).toStringAsFixed(1)}km caminando',
                style: theme.textTheme.bodySmall,
              ),
            ],
          ),
          // Mostrar información de transbordo si está disponible
          if (suggestion.transbordo != null) ...[
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: theme.colorScheme.primaryContainer.withOpacity(0.3),
                borderRadius: BorderRadius.circular(6),
                border: Border.all(
                  color: theme.colorScheme.primary.withOpacity(0.3),
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.swap_horiz,
                    color: theme.colorScheme.primary,
                    size: 16,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Transbordo: ${suggestion.transbordo!.estacionOrigen} → ${suggestion.transbordo!.estacionDestino}',
                          style: theme.textTheme.bodySmall?.copyWith(
                            fontWeight: FontWeight.w500,
                            color: theme.colorScheme.primary,
                          ),
                        ),
                        Text(
                          '${suggestion.transbordo!.distanciaCaminando} • ${suggestion.transbordo!.tiempoCaminando}',
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.secondary,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
          const SizedBox(height: 8),
          Row(
            children: [
              Icon(
                Icons.schedule,
                color: theme.colorScheme.secondary,
                size: 16,
              ),
              const SizedBox(width: 8),
              Text(
                'Total: ${suggestion.estimatedTotalTime.toStringAsFixed(1)} min',
                style: theme.textTheme.bodySmall?.copyWith(
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: OutlinedButton.icon(
                  onPressed: () {
                    _showRouteDetails(suggestion);
                  },
                  icon: const Icon(Icons.info_outline, size: 16),
                  label: const Text('Ver Ruta'),
                  style: OutlinedButton.styleFrom(
                    foregroundColor: Colors.black,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () {
                    _showRouteDetails(suggestion);
                  },
                  icon: const Icon(Icons.check, size: 16),
                  label: const Text('Seleccionar'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: theme.colorScheme.primary,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildErrorWidget() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.red.shade50,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.red.shade200),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.error_outline, color: Colors.red.shade600),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  'Error al buscar rutas',
                  style: TextStyle(
                    color: Colors.red.shade700,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            error!,
            style: TextStyle(
              color: Colors.red.shade600,
              fontSize: 12,
            ),
          ),
          const SizedBox(height: 8),
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                  onPressed: findRouteSuggestions,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red.shade600,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: const Text('Reintentar'),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _showRouteDetails(RouteSuggestionModel suggestion) async {
    // Obtener la ubicación actual del usuario si no está disponible
    double userLat = widget.userLatitude ?? 0.0;
    double userLng = widget.userLongitude ?? 0.0;
    
    if (userLat == 0.0 && userLng == 0.0) {
      try {
        final position = await LocationService.getCurrentLocation();
        if (position != null) {
          userLat = position.latitude;
          userLng = position.longitude;
        }
      } catch (e) {
        print('❌ Error getting user location: $e');
        // Usar coordenadas por defecto de San Luis Potosí
        userLat = 22.1565;
        userLng = -100.9855;
      }
    }

    if (context.mounted) {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => RouteDetailScreen(
            routeSuggestion: suggestion,
            destinationAddress: widget.destinationAddress ?? 'Destino',
            userLatitude: userLat,
            userLongitude: userLng,
            destinationLatitude: widget.destinationLatitude ?? 0.0,
            destinationLongitude: widget.destinationLongitude ?? 0.0,
          ),
        ),
      );
    }
  }
} 